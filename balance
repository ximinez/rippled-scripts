#!/bin/bash

# Show an extremely abbreviated summary of the current account line balances and
# XRP balance. Account can be provided on the command line or stored in a file
# called "ripple-account.txt" in the same directory that this script runs from.

accountfile="$( dirname $0 )/ripple-account.txt"
if [ -r ${accountfile} ]
then
  defaultaccount=$(cat ${accountfile})
else
  defaultaccount=rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh
fi

RIPPLED=${1:-$( dirname $0 )/rippled}
RPC_IP=${2:-127.0.0.1}
RPC_PORT=${3:-51235}
account=${4:-${defaultaccount}}

name()
{
  curl https://data.ripple.com/v2/gateways/$1 2>/dev/null | \
    json_pp | \
      gawk '(/"name"/) { print $3; }'
}

# echo $account
${RIPPLED} -q \
  --rpc_ip=${RPC_IP}:${RPC_PORT} account_lines ${account} "" \
    validated | egrep 'balance|currency|account|index|limit|quality|error' \
    | gawk '
      function gatewayname(c)
      {
        switch(c)
        {
          case "razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA":
            return "RippleChina";
          case "r3ADD8kXSUKHd6zTCKfnKT3zV9EZHjzp1S":
            return "RippleUnion";
          case "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B" :
            return "Bitstamp   ";
          case "rrh7rf1gV2pXAoqA8oYbpHd8TKv5ZQeo67" :
            return "GBI        ";
          case "rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq" :
            return "Gatehub    ";
          case "rMAz5ZnK73nyNUL4foAvaxdreczCkG3vA6" :
            return "Ripple Trade Japan";
          case "r94s8px6kSw1uZ1MV98dhSRTvc6VMPoPcN" :
            return "tokyojpy   ";
          case "rG6FZ31hDHN1K5Dkbma3PSB5uVCuVVRzfn" :
            return "Bitso      ";
          case "rMwjYedjc7qqtKYVLiAccJSmCwih4LnE2q" :
            return "SnapSwap   ";
	  case "rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h"  :
	  case "rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL"  :
          case "rDAN8tzydyNfnNf2bfUQY6iR96UbpvNsze" :
          case "rckzVpTnKpP4TJ1puQe827bV3X4oYtdTP"  :
	    return "Gatehub Fifth";
          default: return c;
        }
      }
      { sub(/^ */, ""); gsub(/[,"]/, "", $3); }
      ( /account/ ) { account = $3; }
      ( /balance/ ) { balance = $3; }
      ( /limit/ && $3 > limit ) { limit = $3; }
      ( /currency/ ) { currency = $3; }
      (/quality_out/ && balance != 0 ) { print currency " / " gatewayname(account) " : " balance " / " limit; }
      ( balance == "" && account == "" ) { print; }
      ( /quality_out/ ) { balance=""; account=""; limit=0; }' \
  && ${RIPPLED} -q \
    --rpc_ip=${RPC_IP}:${RPC_PORT} account_info ${account} validated \
      | jq -rc 'if .error then { "error" : .error,
        "error_message" : .error_message }
        elif .result.error then { "error" : .result.error,
        "error_message" : .result.error_message }
        else { "Account" : .result.account_data.Account,
        "Balance" : (.result.account_data.Balance | tonumber / 1000000),
        "PreviousTxnLedgerSeq" : .result.account_data.PreviousTxnLgrSeq }
        end'
