#!/bin/bash

# Show an extremely abbreviated summary of the current account line balances and
# XRP balance. Account can be provided on the command line or stored in a file
# called "ripple-account.txt" in the same directory that this script runs from.

defaultaccount=( rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh )
for accountfile in "$( dirname $0 )/ripple-accounts.txt" \
  "$( dirname $0)/ripple-account.txt"
do
  if [ -r ${accountfile} ]
  then
    defaultaccount=( $(cat ${accountfile}) )
    break
  fi
done

RIPPLED=${1:-$( dirname $0 )/rippled}
RPC_IP=${2:-127.0.0.1}
RPC_PORT=${3:-51235}
shift 3
accounts=( ${@:-${defaultaccount[@]}} )

name()
{
  curl https://data.ripple.com/v2/gateways/$1 2>/dev/null | \
    json_pp | \
      gawk '(/"name"/) { print $3; }'
}

for account in ${accounts[@]}
do
  # echo $account
  ${RIPPLED} -q \
    --rpc_ip=${RPC_IP}:${RPC_PORT} account_lines ${account} "" \
      validated | grep -e balance -e currency -e account \
        -e limit -e quality -e error_message \
      | gawk '
        function currencyname(c)
        {
          switch(c)
          {
            case "534F4C4F00000000000000000000000000000000":
              return "SOLO";
            case "0158415500000000C1F76FF6ECB0BAC600000000":
              return "XAU";
            default: return c;
          }
        }
        function gatewayname(c)
        {
          switch(c)
          {
            case "razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA":
              return "RippleChina";
            case "r3ADD8kXSUKHd6zTCKfnKT3zV9EZHjzp1S":
              return "RippleUnion";
            case "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B" :
              return "Bitstamp   ";
            case "rrh7rf1gV2pXAoqA8oYbpHd8TKv5ZQeo67" :
              return "GBI        ";
            case "rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq" :
              return "Gatehub    ";
            case "rMAz5ZnK73nyNUL4foAvaxdreczCkG3vA6" :
              return "Ripple Trade Japan";
            case "r94s8px6kSw1uZ1MV98dhSRTvc6VMPoPcN" :
              return "tokyojpy   ";
            case "rG6FZ31hDHN1K5Dkbma3PSB5uVCuVVRzfn" :
              return "Bitso      ";
            case "rMwjYedjc7qqtKYVLiAccJSmCwih4LnE2q" :
              return "SnapSwap   ";
            case "rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h"  :
            case "rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL"  :
            case "rDAN8tzydyNfnNf2bfUQY6iR96UbpvNsze" :
            case "rckzVpTnKpP4TJ1puQe827bV3X4oYtdTP"  :
              return "Gatehub Fifth";
            case "rsoLo2S1kiGeCcn6hCUXVrCpGMWLrRrLZz" :
              return "Sologenic  ";
            default: return c;
          }
        }
        { sub(/^ */, ""); gsub(/[,"]/, "", $3); }
        ( /account/ ) { account = $3; }
        ( /balance/ ) { balance = $3; }
        ( /limit/ && $3 > limit ) { limit = $3; }
        ( /currency/ ) { currency = $3; }
        (/quality_out/ && balance != 0 ) { print currencyname(currency) " / " gatewayname(account) " : " balance " / " limit; }
        ( balance == "" && account == "" ) { print; }
        ( /quality_out/ ) { balance=""; account=""; limit=0; }' \
    && ${RIPPLED} -q \
      --rpc_ip=${RPC_IP}:${RPC_PORT} account_info ${account} validated \
        | jq -rc '
          if .error then
            { error, error_message }
          elif .result.error then
            .result |
            { error, error_message }
          else
            .result.account_data |
            { Account,
              "Balance" : (.Balance | tonumber / 1000000),
              "LastLedger" : .PreviousTxnLgrSeq
            }
          end'
done
