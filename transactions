#!/bin/bash

# set -e

rpc_ip=${1:-"127.0.0.1:5015"}
ssh_host=${2:-localhost}
rpc_private=${3:-5015}
shift 3

accounts=( rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh )
for accountfile in "$( dirname $0 )/ripple-account.txt" "$( dirname $0 )/ripple-accounts.txt"
do
  echo Looking for account file ${accountfile}
  if [ -r ${accountfile} ]
  then
    accounts=( $( cat ${accountfile} ) )
    echo "Found accounts ${accounts[@]}"
    break
  fi
done

can_delete()
{
  set -o pipefail
  if [[ ${ssh_host} == $( hostname ) ]] || [[ ${ssh_host} == "localhost" ]]
  then
    ~/bin/rippled -q --rpc_ip=127.0.0.1:${rpc_private} can_delete $* | \
      jq '.result.can_delete'
  else
    ssh ${ssh_host} ~/bin/rippled -q --rpc_port=127.0.0.1:${rpc_private} can_delete $1 | \
      jq '.result.can_delete'
  fi
}

until last=$( can_delete ) && [[ ${last} != "null" ]]
do
  echo "Can not determine starting point (${last}). Will retry."
  sleep 60
done

echo Last checked ledger: $last
next=$(( ${last} + 1 ))

while true
do
  echo
  date
  echo Checking starting with ${next}
  unset nextdelete
  for account in "${accounts[@]}"
  do
    echo Looking for transactions for ${account} starting from ledger ${next}
    time txs=$( ~/bin/rippled -q --rpc_ip=${rpc_ip} account_tx \
      -- ${account} ${next} ${nextdelete:--1} descending )

    error=$(echo ${txs} | jq '.error' )
    status=$(echo ${txs} | jq '.result.status' )
    if [[ ${error} != "null" ]]
    then
      echo Error: $error
      echo ${txs} | jq '[ .error_message, .error_what ]'
      sleep 60
      break
    elif [[ ${status} != '"success"' ]]
    then
      echo account_tx status: ${status}
      echo ${txs} | jq '[ .result.error, .result.error_message ]'
      sleep 60
      break
    fi

    min=$( echo ${txs} | jq '.result.ledger_index_min' )
    max=$( echo ${txs} | jq '.result.ledger_index_max' )
    if [[ ${min} > ${next} ]]
    then
      backfill=$(( ${min} - ${next} ))
      echo rippled only has ${min}-${max}. Wait for backfill ${backfill} ledgers.
      sleep $(( $backfill / 10 ))
      unset nextdelete
      break
    fi
    if [[ ! -v nextdelete ]]
    then
      nextdelete=${max}
      echo Pending can_delete to ${nextdelete}
    fi

    count=$( echo ${txs} | jq '.result.transactions | length' )
    echo Found ${count} txs in ${min}-${max}
    if [[ ${count} > 0 ]]
    then
      echo "${txs}" >> transactions.${min}-${max}.txt
    fi
  done
  if [[ -v nextdelete ]]
  then
    can_delete ${nextdelete}
    next=$(( ${nextdelete} + 1 ))
    echo Updated can_delete to $( can_delete )

    # Delay enough time for a new ledger to close.
    sleep 30
  fi
done

