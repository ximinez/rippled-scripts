#!/bin/bash

# Parses the output of `rippled account_tx` and `rippled tx`

if [[ $# -gt 0 ]] ; then
  for file in "${@}" ; do
    echo "${file}"
    ${0} < "${file}"
  done
  exit
fi

jq '
def tolocaltime: strflocaltime("%Y-%m-%d, %I:%M:%S %p (%Z)") ;
def dropstoxrp: tonumber / 1000000 | tostring + " XRP" ;
def currencyname:
(
  (
    if . == "534F4C4F00000000000000000000000000000000" then
      "SOLO"
    elif . == "0158415500000000C1F76FF6ECB0BAC600000000" then
      "XAU"
    elif . == "524C555344000000000000000000000000000000" then
      "RLUSD"
    else
      empty
    end
  ) // .
);
def exchangename:
(
  (
    if . == "razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA" then
      "RippleChina"
    elif . == "r3ADD8kXSUKHd6zTCKfnKT3zV9EZHjzp1S" then
      "RippleUnion"
    elif . == "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B" then
      "Bitstamp"
    elif . == "rrh7rf1gV2pXAoqA8oYbpHd8TKv5ZQeo67" then
      "GBI"
    elif . == "rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq" then
      "Gatehub"
    elif . == "rMAz5ZnK73nyNUL4foAvaxdreczCkG3vA6" then
      "Ripple Trade Japan"
    elif . == "r94s8px6kSw1uZ1MV98dhSRTvc6VMPoPcN" then
      "tokyojpy"
    elif . == "rG6FZ31hDHN1K5Dkbma3PSB5uVCuVVRzfn" then
      "Bitso"
    elif . == "rMwjYedjc7qqtKYVLiAccJSmCwih4LnE2q" then
      "SnapSwap"
    elif . == "rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h" or
        . == "rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL" or
        . == "rDAN8tzydyNfnNf2bfUQY6iR96UbpvNsze" or
        . == "rckzVpTnKpP4TJ1puQe827bV3X4oYtdTP" then
      "Gatehub Fifth"
    elif . == "rsoLo2S1kiGeCcn6hCUXVrCpGMWLrRrLZz" then
      "Sologenic"
    elif . == "rMxCKbEDwqr76QuheSUMdEGf4B9xJ8m5De" then
      "Ripple Stablecoin"
    else
      empty
    end
  ) + " (" + . + ")" // .
);
def accountname:
(
  if . == "rYourAccountIDHere" then
    "MY ACCOUNT"
  else
    exchangename
  end

);
def stamount:
(
  if type == "string" then
    dropstoxrp
  elif has("currency") then
    ( .value | tostring )+ " " + ( .currency | currencyname ) + "/" + ( .issuer | accountname )
  else
    .
  end
);
def resultFields:
(
  .NewFields // .FinalFields
);
def balance:
(
  if . == null or .Balance == null then
    0
  elif .Balance | type == "object" then
    .Balance.value | tonumber
  else
    .Balance | tonumber
  end
);
def finalbalance:
(
  if . == null then
    0
  elif resultFields == null and .PreviousFields != null then
    .PreviousFields | balance
  else
    resultFields | balance
  end
);
def previousbalance:
(
  if . == null then
    0
  elif ( .PreviousFields == null or .PreviousFields.Balance == null)
      and .FinalFields != null then
    .FinalFields | balance
  else
    .PreviousFields | balance
  end
);
def rippleepoch: "2000-01-01T0:00:00Z" | fromdate ;
def fromrippletime: . + rippleepoch ;
def unhexone:
(
  explode
  | map(
    if . >= 97 and . <= 122 then
      . - 97 + 10
    elif . >= 65 and . <= 90 then
      . - 65 + 10
    elif . >= 48 and . <= 57 then
      . - 48
    else
      null
    end
  )
  | .[]
);
def unhextwo:
  [ ( ( .[0:1] | unhexone ) * 16) + ( .[1:2] | unhexone ) ] | implode
;
def unhex:
  [., null] |
  until(
    (.[0] | length) == 0 ;
    [ .[0][2:], .[1] + ( .[0][0:2] | unhextwo ) ]
  ) |
  .[1]
;
def parsetxinfo:
  {
    ( .TransactionType ) : ( .Account | accountname ),
    "hash": .hash,
    "ledger": ( "#" + ( .ledger_index | tostring ) + " @ " +
      ( .date | fromrippletime | tolocaltime ) ),
  }
;
def parsetxresult:
  {
    "changes": (
      .meta.AffectedNodes |
      map(
        {
          op: ( keys | .[0] ),
          ( keys | .[0] ) : .[] | (
            .LedgerEntryType + " for "
          ),
          Account: .[] | ( ( resultFields | .Account | accountname ) //
              ( "UNCHANGED: " + ( .LedgerIndex | .[:20] ) + "..." ) )
        } +
        if .[] | .LedgerEntryType == "AccountRoot"
        then
          .[] |
          {
            "balancechange": (
              ( finalbalance - previousbalance ) | dropstoxrp
            )
          }
        elif .[] | .LedgerEntryType == "RippleState"
        then
          .[] |
          . + {
            change: {
              value: ( finalbalance - previousbalance ),
              currency: resultFields | .Balance.currency | currencyname,
              highIssuer: resultFields | .HighLimit.issuer,
              highQIn: resultFields | .HighQualityIn,
              highQOut: resultFields | .HighQualityOut,
              lowIssuer: resultFields | .LowLimit.issuer,
              lowQIn: resultFields | .LowQualityIn,
              lowQOut: resultFields | .LowQualityOut,
            }
          } |
          . + {
            change: ( .change + ( .change | {
              highExchange: ( .highIssuer | exchangename ),
              lowExchange: ( .lowIssuer | exchangename ),
              useHighIssuer: ( ( .highIssuer | exchangename ) !=
                .highIssuer ),
              issuer: (
                if ( ( .highIssuer | exchangename ) != .highIssuer ) then
                  .highIssuer
                else
                  .lowIssuer
                end
              ),
              other: (
                if ( ( .highIssuer | exchangename ) != .highIssuer ) then
                  .lowIssuer
                else
                  .highIssuer
                end
              )
            } ) )
          } |
          if ( .change.useHighIssuer | not ) and .change.value != 0 then
            . + {
              change: ( .change + ( .change | {
                value: -.value,
              } ) )
            }
          else
            .
          end |
          if .change.useHighIssuer then
            . + {
              change: ( .change + ( .change | {
                qIn: .lowQIn,
                qOut: .lowQOut,
              } ) )
            }
          else
            . + {
              change: ( .change + ( .change | {
                qIn: .highQIn,
                qOut: .highQOut,
              } ) )
            }
          end |
            {
              balancechange: ( .change | stamount ),
              "for": ( .change.other | accountname ),
            }
            + (
              if .change | ( has("qIn") and .qIn )
              then
                {
                  qInPct : ( ( .change.qIn / 10000000 ) | tostring + "%" ),
                }
              else
                null
              end
            )
            + (
              if .change | ( has("qOut") and .qOut )
              then
                {
                  qOutPct : ( ( .change.qOut / 10000000 ) | tostring + "%" )
                }
              else
                null
              end
            )
        elif .[] | .LedgerEntryType == "Offer" then
          (
            .[] | resultFields |
            {
              Offer: ( "Sell: " + ( .TakerGets | stamount ) + " for " +
                ( .TakerPays | stamount ) +
                ( if .Expiration then ( ", expires: " + (.Expiration
                  | fromrippletime | tolocaltime ) ) else null end
                )
              )
            }
          )
          # + .
        elif .[] | .LedgerEntryType == "Escrow" then
          (
            .[] | resultFields |
            {
              Destination: ( .Destination | accountname ),
              Amount: ( .Amount | stamount ),
              FinishAfter: ( .FinishAfter | fromrippletime | tolocaltime ),
              CancelAfter: ( .CancelAfter | fromrippletime | tolocaltime )
            }
          )
        elif .[] | .LedgerEntryType == "DirectoryNode" then
          empty
        else
          null
        end |
        . + (
          if has("for") then
          {
            ( .op ) : ( .[.op] + .for )
          }
          elif has("Account") then
          {
            ( .op ) : ( .[.op] + .Account )
          }
          else
            null
          end
        )
        | del(.["op", "for", "Account"])
      )
    )
  }
;
def parsememos:
  if has("Memos") then
    {
      memos: (
        .Memos | map
        ( .Memo |
          (
          if (has("MemoData") and .MemoData)
          then
          {
            MemoData: .MemoData | unhex,
          }
          else null end
          +
          if (has("MemoFormat") and .MemoFormat)
          then
          {
            MemoFormat: .MemoFormat | unhex,
          }
          else null end
          +
          if (has("MemoType") and .MemoType)
          then
          {
            MemoType: .MemoType | unhex
          }
          else null end
          )
        )
      )
    }
  else
    null
  end
;
def parsedelivered:
  if has("delivered_amount") then
    {
      "delivered_amount": .delivered_amount | stamount
    }
  else
    null
  end
;
if has("result") then
  .result |
  if has("transactions") then
    .transactions |
    map(
      { validated }
      + (
        .tx | parsetxinfo
      )
      + parsetxresult
      + (
        .tx | parsememos
      )
      + (
        .meta | parsedelivered
      )
    )
    | .[]
  elif has("meta") then
    { validated }
    + parsetxinfo
    + parsetxresult
    + parsememos
    + (
      .meta | parsedelivered
    )
  else
    "Unknown format"
  end
elif has("meta") then
  { validated }
  + parsetxinfo
  + parsetxresult
  + parsememos
  + (
    .meta | parsedelivered
  )
else
  "Unknown format"
end
'
