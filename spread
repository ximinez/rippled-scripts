#!/bin/bash

# Show the spread of a currency pair

pair=( ${1} ${2} )
shift 2
RIPPLED=${1:-$( dirname $0 )/rippled}
RPC_IP=${2:-127.0.0.1}
RPC_PORT=${3:-51235}
shift 3

name()
{
  curl https://data.ripple.com/v2/gateways/$1 2>/dev/null | \
    json_pp | \
      gawk '(/"name"/) { print $3; }'
}

# Build the pair for rippled
humanpair=()
machinepair=()
for currency in ${pair[@]}
do
  # Parse each currency into human and machine readable text, regardless
  # of input
  human=$( echo $currency | gawk -F/ ' \
        function gatewayname(c)
        {
          switch(c)
          {
            case "razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA":
              return "RippleChina";
            case "r3ADD8kXSUKHd6zTCKfnKT3zV9EZHjzp1S":
              return "RippleUnion";
            case "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B" :
              return "Bitstamp";
            case "rrh7rf1gV2pXAoqA8oYbpHd8TKv5ZQeo67" :
              return "GBI";
            case "rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq" :
              return "Gatehub";
            case "rMAz5ZnK73nyNUL4foAvaxdreczCkG3vA6" :
              return "Ripple Trade Japan";
            case "r94s8px6kSw1uZ1MV98dhSRTvc6VMPoPcN" :
              return "tokyojpy";
            case "rG6FZ31hDHN1K5Dkbma3PSB5uVCuVVRzfn" :
              return "Bitso";
            case "rMwjYedjc7qqtKYVLiAccJSmCwih4LnE2q" :
              return "SnapSwap";
            case "rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h"  :
            case "rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL"  :
            case "rDAN8tzydyNfnNf2bfUQY6iR96UbpvNsze" :
            case "rckzVpTnKpP4TJ1puQe827bV3X4oYtdTP"  :
              return "Gatehub Fifth";
            case "rMxCKbEDwqr76QuheSUMdEGf4B9xJ8m5De" :
              return "Ripple";
            default: return c;
          }
        }
        { OFS=FS; if (NF >= 2) $2=gatewayname($2); print $0; }
        ' )
  humanpair=( "${humanpair[@]}" "$human" )
  machine=(
    $( echo $currency | gawk -F/ ' \
        function currencyname(c)
        {
          switch(c)
          {
            case "RLUSD":
              return "524C555344000000000000000000000000000000";
            default: return c;
          }
        }
        function gatewayname(c)
        {
          switch(c)
          {
            case "RippleChina":
              return "razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA";
            case "RippleUnion":
              return "r3ADD8kXSUKHd6zTCKfnKT3zV9EZHjzp1S";
            case "Bitstamp":
              return "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B" ;
            case "GBI":
              return "rrh7rf1gV2pXAoqA8oYbpHd8TKv5ZQeo67" ;
            case "Gatehub":
              return "rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq" ;
            case "Ripple Trade Japan":
              return "rMAz5ZnK73nyNUL4foAvaxdreczCkG3vA6" ;
            case "tokyojpy":
              return "r94s8px6kSw1uZ1MV98dhSRTvc6VMPoPcN" ;
            case "Bitso":
              return "rG6FZ31hDHN1K5Dkbma3PSB5uVCuVVRzfn" ;
            case "SnapSwap":
              return "rMwjYedjc7qqtKYVLiAccJSmCwih4LnE2q" ;
            case "Gatehub Fifth":
              # Arbitrarily pick one
              return "rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h"  ;
              # return "rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL"  ;
              # return "rDAN8tzydyNfnNf2bfUQY6iR96UbpvNsze" ;
              # return "rckzVpTnKpP4TJ1puQe827bV3X4oYtdTP"  ;
            case "Ripple":
              return "rMxCKbEDwqr76QuheSUMdEGf4B9xJ8m5De" ;
            default: return c;
          }
        }
        {
          if (NF >= 2) {
            $1=currencyname($1);
            $2=gatewayname($2);
            print $1 OFS $2
          }
          else
          {
            # Should be XRP
            print $1
          }
        }
        '
    )
  )
  # echo "Machine: ${machine[@]}"
  machine=$( echo $(
    cat <<-MACHINE
    {
      "currency" : "${machine[0]}",
      "issuer" : "${machine[1]}"
    }
MACHINE
  ) | jq 'map_values(select(. != ""))' )
  machinepair=( "${machinepair[@]}" "$machine" )
done
# echo "Machine pair: ${machinepair[@]}"

XRP=1
if [ "${humanpair[0]}" == "XRP" ]
then
  XRP=1000000
elif [ "${humanpair[1]}" == "XRP" ]
then
  XRP=0.000001
fi
json=$( echo $(
  cat <<-JSON
    {
      "taker_pays" : ${machinepair[0]},
      "taker_gets" : ${machinepair[1]},
      "ledger_index" : "validated"
    }
JSON
  ) | jq -c '.'
)
reversejson=$( echo $(
  cat <<-REVERSEJSON
    {
      "taker_gets" : ${machinepair[0]},
      "taker_pays" : ${machinepair[1]},
      "ledger_index" : "validated"
    }
REVERSEJSON
  ) | jq -c '.'
)
# echo "JSON: $json"
# echo "REVERSEJSON: $reversejson"
echo "${humanpair[@]} spread: " \
  $( ${RIPPLED} -q --rpc_ip=${RPC_IP}:${RPC_PORT} \
    json book_offers "${json}" \
    | jq "if .error != null then .error_message
      elif .result.error != null then .result.error_message
      else .result.offers[0].quality | tonumber | 1 / . * ${XRP} * 100000
      | round | . / 100000 end"
  ) \
  $( ${RIPPLED} -q \
    --rpc_ip=${RPC_IP}:${RPC_PORT} \
    json book_offers "${reversejson}" \
    | jq "if .error != null then .error_message
      elif .result.error != null then .result.error_message
      else .result.offers[0].quality | tonumber * ${XRP} * 100000
      | round | . / 100000 end"
  )
