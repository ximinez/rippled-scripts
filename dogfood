#!/bin/bash

# DIR=msvc22.ON; CONFIG=Release ; tparam=( ) ; TEST=cmake/${DIR}/${CONFIG} && set -o pipefail && time SimpleRippledTestLoop "${tparam[@]}" && echo 'Built!' && for f in debug perf ; do if [ -f ~/rippled/log/${f}.log ] ; then mv -v ~/rippled/log/${f}.log{,$(date +'.%s')} ; fi; done && mv -vf ./build/${TEST}/rippled.exe ./build/ && time ( start ./build/rippled.exe --conf ~/.config/ripple/rippled.cfg- -net && echo 'Started?' || echo Uhoh) ; grep -e failures -e "1 failure" build/testrun.out

nproc=$(nproc)

unset windows

terminal=
if [[ "${OS}" =~ "Windows" ]]
then
  windows=1
  configs=( Release Debug )
  buildopt="-m"
  launch=( start )
  launchdir="Release"
else
  configs=( "" )
  buildopt="-j${nproc}"
  launch=( tmux new-window -a -t rippled:$ -n rippled )
  launchdir=""
fi

logfile="$(pwd)/build/testrun.out"
rm -fv "${logfile}"

tmuxopts="-d"
if [[ -v DISPLAY ]] && type -t gnome-terminal >& /dev/null
then
  terminal="gnome-terminal --"
  tmuxopts=""
fi
if [[ ! -v TMUX ]] && type -t tmux >& /dev/null
then
  # set -x
  cmd=( ${terminal} tmux new-session ${tmuxopts} -s rippled -x 80 -y 30 \
    sleep 600 )
  echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
  "${cmd[@]}" || true
  cmd=( tmux new-window -d -a -t rippled:$ -n dogfood \
    "${0}" "${@}" wait )
  echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
  "${cmd[@]}" || true
  cmd=( tmux select-window -t rippled:dogfood )
  echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
  "${cmd[@]}" || true
  cmd=( tmux kill-window -t rippled:sleep )
  echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
  "${cmd[@]}" || true
  # tmux set-option -w -t rippled:dogfood remain-on-exit on
  echo 'Running in tmux session. Use "tmux attach -t rippled" to join it'
  exit
fi

# Exit if anything fails
set -e
# Output commands before executing them
# set -x

cmake_prefix=./build/cmake/
cmake_dirs=$(\ls -r ${cmake_prefix})
echo Dirs: ${cmake_dirs}
cmake_targets="rippled"
echo Targets: ${cmake_targets}
echo "Configs: ${configs[@]}"
rundir=$(\ls -r ${cmake_prefix} | head -1)
echo rundir: ${rundir}

gdb=()
gdbextra=()
clean=0
fast=0
build=1
test=0
while [[ ${#@} > 0 ]]
do
  if [[ "$1" == "fast" || "$1" == "notest" ]]
  then
    shift
    fast=1
  elif [[ "$1" == "nobuild" ]]
  then
    shift
    build=0
  elif [[ "$1" == "debug" ]] && type -t gdb >& /dev/null
  then
    shift
    gdb=( gdb -q )
    gdbextra=( --fg )
  elif [[ "$1" == "debug" && -n "${launchdir}" ]]
  then
    shift
    launchdir="Debug"
  elif [[ "$1" == "test" ]]
  then
    shift
    test=1
  elif [[ "$1" == "clean" ]]
  then
    shift
    clean=1
  elif [[ "$1" == "wait" ]]
  then
    shift
    wait=1
  elif [[ ${#gdb[@]} > 0 && "$1" == "--" ]]
  then
    shift
    if [[ "${#@}" ]]
    then
      gdb+=( "${@}" )
      shift "${#@}"
    fi
  elif [[ -d "${cmake_prefix}$1" ]]
  then
    rundir="$1"
    echo rundir changed to: ${rundir}
    shift
  else
    echo "Unknown option: $1" 1>&2
    exit 127
  fi
done

datestamp=$( date +%s )

time (
  set -o pipefail
  if [[ ${clean} != 0 ]]
  then
    for dir in ${cmake_dirs}
    do
      dir=${cmake_prefix}${dir}
      cmd=( cmake --build $dir --target clean )
      echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
      "${cmd[@]}" |& tee -a "${logfile}" || exit 1
    done
  fi

  # Determine if parallel unit tests are enabled.
  parallel_test=''

  set -x
  dir=${cmake_prefix}${rundir}
  unset config
  if [[ -n "${launchdir}" ]]
  then
    config=( --config "${launchdir}" )
  fi
  src=$(pwd)
  if pushd $dir
  then
    cmd=( cmake "${src}" )
    echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
    "${cmd[@]}" |& tee -a "${logfile}" || exit 1
    popd
  fi
  cmd=( cmake --build $dir "${config[@]}" -- ${buildopt} )
  echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
  "${cmd[@]}" |& tee -a "${logfile}" || exit 1
  parallel_test=$( $dir/${launchdir}/rippled --help |& \
    grep -q unittest-jobs && \
    echo "--testjobs=${nproc}" )
  set +x

  echo Parallel: ${parallel_test} |& tee -a "${logfile}"

  if [[ ${build} != 0 ]]
  then
    # CMake
    if [[ ${fast} != 0 ]]
    then
      for dir in ${cmake_dirs}
      do
        dir=${cmake_prefix}${dir}
        src=$(pwd)
        if pushd $dir
        then
          cmd=( cmake "${src}" )
          echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
          "${cmd[@]}" |& tee -a "${logfile}" || exit 1
          popd
        fi
        for target in ${cmake_targets}
        do
          for config in "${configs[@]}"
          do
            echo Building $target in $dir |& tee -a "${logfile}"
            if [[ -n "$config" ]]
            then
              echo "With configuration $config" |& tee -a "${logfile}"
              config="--config $config"
            fi
            cmd=( cmake --build $dir --target $target $config -- ${buildopt} )
            echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
            "${cmd[@]}" |& tee -a "${logfile}" || exit 1
          done
        done
      done || exit 1
    else
      set -x
      unset config
      if [[ -n "${configs[@]}" ]]
      then
        config=( --config "${configs[@]}" )
      fi
      cmd=( ./Builds/Test.py -v --dir ${cmake_dirs} --target ${cmake_targets}
        "${config[@]}" ${parallel_test} -- ${buildopt} )
      echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
      "${cmd[@]}" |& tee -a "${logfile}" || exit 1
      set +x
    fi
  fi

) || exit 1

if [[ ${test} != 0 ]]
then
  exit 0
fi

set -x

ulimit -c unlimited
if type -t tmux >& /dev/null
then
  cmd=( ${terminal} tmux new-session ${tmuxopts} -s rippled -x 80 -y 30
    sleep 600 )
  echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
  "${cmd[@]}" || true
  # Give the terminal a few seconds to create
  sleep 2
fi
for network in rippled # rippled-altnet
do
  for file in debug.log logs/debug.log log/debug.log \
      perf.log logs/perf.log log/perf.log
  do
    if [ -e "${HOME}/${network}/${file}" ]
    then
      mv -vi "${HOME}/${network}/${file}"{,.${datestamp}} || true
    fi
  done
  cfgfile="${HOME}/.config/ripple/${network}.cfg"
  if [ -e "${cfgfile}" ]
  then
    runpath="${cmake_prefix}${rundir}/${launchdir}"
    for runfile in rippled{.exe,}
    do
      if [[ -f "${runpath}/${runfile}" ]]
      then
        exe="${runpath}/${runfile}"
        break
      fi
    done
    if [[ ! -f "${exe}" ]]
    then
      echo "Error: Expected executable not found: ${runfile}"
      break
    fi

    if [[ ${#gdb[@]} > 0 ]]
    then
      temp=(
        'set pagination off'
        "run"
        'tui enable'
        'winheight src -8'
        "generate-core-file build/core.${datestamp}"
        "set logging file build/gdb.${datestamp}.txt"
        # "set logging overwrite on"
        "set logging enabled on"
        "thread apply all bt full"
        # "set logging enabled off"
        "quit"
        # "info break"
        # "delete 2"
        # "fg"
        # "thread apply all bt full"
        # "set logging enabled off"
      )
      gdbcommands=()
      for c in "${temp[@]}"
      do
        gdbcommands+=( -ex "${c}" )
      done
      gdbcommands+=( "--args" )
    fi

    # Stop the currently running rippled, if any
    cmd=( "${exe}" --conf "${cfgfile}" stop )
    echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
    "${cmd[@]}" || true
    # Save the executable
    cmd=( cp "${exe}" "build/${runfile}.${datestamp}" )
    echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
    "${cmd[@]}" || true
    # Start the new rippled
    cmd=( "${launch[@]}" "${gdb[@]}" "${gdbcommands[@]}"
      "${exe}" --conf ${cfgfile} --net "${gdbextra[@]}" )
    echo "Run: ${cmd[@]}" |& tee -a "${logfile}"
    "${cmd[@]}"
      : 'https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html'
      : 'C-x a'
  else
    echo "Error: config file not found: ${cfgfile}"
  fi
done

grep failures "${logfile}"

if [[ -v wait ]]
then
  read -n 1 -p "Press any key to continue..." -s
fi
