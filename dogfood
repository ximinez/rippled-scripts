#!/bin/bash

# DIR=msvc22.ON; CONFIG=Release ; tparam=( ) ; TEST=cmake/${DIR}/${CONFIG} && set -o pipefail && time SimpleRippledTestLoop "${tparam[@]}" && echo 'Built!' && for f in debug perf ; do if [ -f ~/rippled/log/${f}.log ] ; then mv -v ~/rippled/log/${f}.log{,$(date +'.%s')} ; fi; done && mv -vf ./build/${TEST}/rippled.exe ./build/ && time ( start ./build/rippled.exe --conf ~/.config/ripple/rippled.cfg- -net && echo 'Started?' || echo Uhoh) ; grep -e failures -e "1 failure" build/testrun.out

nproc=$(nproc)

unset windows

terminal=
if [[ "${OS}" =~ "Windows" ]]
then
  windows=1
  configs=( Release Debug )
  buildopt="-m"
  launch="start"
  launchdir="Release"
else
  configs=( "" )
  buildopt="-j${nproc}"
  launch="tmux new-window -a -t rippled:$ -n rippled"
  launchdir=""
fi

tmuxopts="-d"
if [[ -v DISPLAY ]] && type -t gnome-terminal >& /dev/null
then
  terminal="gnome-terminal --"
  tmuxopts=""
fi
if [[ ! -v TMUX ]] && type -t tmux >& /dev/null
then
  # set -x
  ${terminal} tmux new-session ${tmuxopts} -s rippled -x 80 -y 30 \
    sleep 600 || true
  tmux new-window -d -a -t rippled:$ -n dogfood \
    "${0}" "${@}" wait
  # tmux set-option -w -t rippled:dogfood remain-on-exit on
  echo 'Running in tmux session. Use "tmux attach -t rippled" to join it'
  exit
fi

# Exit if anything fails
set -e
# Output commands before executing them
# set -x

cmake_prefix=./build/cmake/
cmake_dirs=$(\ls -r ${cmake_prefix})
echo Dirs: ${cmake_dirs}
cmake_targets="rippled"
echo Targets: ${cmake_targets}
echo "Configs: ${configs[@]}"
rundir=$(\ls -r ${cmake_prefix} | head -1)
echo rundir: ${rundir}

gdb=""
gdbextra=""
clean=0
fast=0
test=0
while [[ ${#@} > 0 ]]
do
  if [[ "$1" == "fast" ]]
  then
    shift
    fast=1
  elif [[ "$1" == "debug" ]] && type -t gdb >& /dev/null
  then
    shift
    gdb="gdb -q -ex 'tui enable' -ex 'winheight src -8' -ex 'set pagination off' "
    gdbextra="--fg"
  elif [[ "$1" == "test" ]]
  then
    shift
    test=1
  elif [[ "$1" == "clean" ]]
  then
    shift
    clean=1
  elif [[ "$1" == "wait" ]]
  then
    shift
    wait=1
  elif [[ ${#gdb} > 0 && "$1" == "--" ]]
  then
    shift
    if [[ "${#@}" ]]
    then
      gdb="${gdb} ${@} "
      shift "${#@}"
    fi
  elif [[ -d "${cmake_prefix}$1" ]]
  then
    rundir="$1"
    echo rundir changed to: ${rundir}
    shift
  else
    echo "Unknown option: $1" 1>&2
    exit 127
  fi
done

if [[ ${#gdb} > 0 ]]
then
  gdbcommands=(
    "run"
    "generate-core-file"
    "set pagination off"
    "set logging enabled on"
    "thread apply all bt full"
    "set logging enabled off"
    "quit"
  )
  for c in "${gdbcommands[@]}"
  do
    gdb+=" -ex ${c}"
  done
  gdb+=" --args"
fi

time (
  set -o pipefail
  rm -fv build/testrun.out
  if [[ ${clean} != 0 ]]
  then
    for dir in ${cmake_dirs}
    do
      dir=${cmake_prefix}${dir}
      cmake --build $dir --target clean |& tee -a build/testrun.out || exit 1
    done
  fi

  # Determine if parallel unit tests are enabled.
  parallel_test=''

  set -x
  dir=${cmake_prefix}${rundir}
  unset config
  if [[ -n "${launchdir}" ]]
  then
    config=( --config "${launchdir}" )
  fi
  src=$(pwd)
  if pushd $dir
  then
    cmake "${src}"
    popd
  fi
  cmake --build $dir ${config[@]} -- ${buildopt} |& tee -a build/testrun.out || exit 1
  parallel_test=$( $dir/${launchdir}/rippled --help |& grep -q unittest-jobs && \
    echo "--testjobs=${nproc}" )
  set +x

  echo Parallel: ${parallel_test} |& tee -a build/testrun.out

  # CMake
  if [[ ${fast} != 0 ]]
  then
    for dir in ${cmake_dirs}
    do
      dir=${cmake_prefix}${dir}
      src=$(pwd)
      if pushd $dir
      then
        cmake "${src}"
        popd
      fi
      for target in ${cmake_targets}
      do
        for config in "${configs[@]}"
        do
          echo Building $target in $dir |& tee -a build/testrun.out
          if [[ -n "$config" ]]
          then
            echo "With configuration $config" |& tee -a build/testrun.out
            config="--config $config"
          fi
          cmake --build $dir --target $target $config -- ${buildopt} \
            |& tee -a build/testrun.out || exit 1
        done
      done
    done || exit 1
  else
    set -x
    unset config
    if [[ -n "${configs[@]}" ]]
    then
      config=( --config "${configs[@]}" )
    fi
    ./Builds/Test.py -v --dir ${cmake_dirs} --target ${cmake_targets} \
      "${config[@]}" \
      ${parallel_test} -- ${buildopt} |& tee -a build/testrun.out || exit 1
    set +x
  fi

) || exit 1

if [[ ${test} != 0 ]]
then
  exit 0
fi

set -x

ulimit -c unlimited
if type -t tmux >& /dev/null
then
  ${terminal} tmux new-session ${tmuxopts} -s rippled -x 80 -y 30 \
    sleep 600 || true
  # Give the terminal a few seconds to create
  sleep 2
fi
for network in rippled # rippled-altnet
do
  for file in debug.log logs/debug.log log/debug.log \
      perf.log logs/perf.log log/perf.log
  do
    if [ -e "${HOME}/${network}/${file}" ]
    then
      mv -vi "${HOME}/${network}/${file}"{,.$(date '+%s')} || true
    fi
  done
  if [ -e ~/.config/ripple/${network}.cfg ]
  then
    # Stop the currently running rippled, if any
    "${cmake_prefix}${rundir}/${launchdir}/rippled" \
      --conf ~/.config/ripple/${network}.cfg stop || true
    # Start the new rippled
    ${launch} "${gdb} \
      ${cmake_prefix}${rundir}/${launchdir}/rippled \
      --conf ~/.config/ripple/${network}.cfg --net ${gdbextra}"
      : 'https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html'
      : 'C-x a'
  fi
done

grep failures build/testrun.out

if [[ -v wait ]]
then
  read -n 1 -p "Press any key to continue..." -s
fi
