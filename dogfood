#!/bin/bash

terminal=
tmuxopts="-d"
if [[ -v DISPLAY ]]; then
  terminal="gnome-terminal --"
  tmuxopts=""
fi
if [[ ! -v TMUX ]]
then
  # set -x
  ${terminal} tmux new-session ${tmuxopts} -s rippled -x 80 -y 30 \
    sleep 600 || true
  tmux new-window -d -a -t rippled:$ -n dogfood \
    "${0}" "${@}" wait
  # tmux set-option -w -t rippled:dogfood remain-on-exit on
  echo 'Running in tmux session. Use "tmux attach -t rippled" to join it'
  exit
fi

# Exit if anything fails
set -e
# Output commands before executing them
# set -x

cmake_prefix=./build/cmake/
cmake_dirs=$(\ls -r ${cmake_prefix})
echo Dirs: ${cmake_dirs}
cmake_targets="rippled"
echo Targets: ${cmake_targets}
rundir=$(\ls -r ${cmake_prefix} | head -1)
echo rundir: ${rundir}

gdb=""
gdbextra=""
clean=0
fast=0
test=0
while [[ ${#@} > 0 ]]
do
  if [[ "$1" == "fast" ]]
  then
    shift
    fast=1
  elif [[ "$1" == "debug" ]]
  then
    shift
    gdb="gdb -q -ex 'tui enable' -ex 'winheight src -8' -ex 'set pagination off' "
    gdbextra="--fg"
  elif [[ "$1" == "test" ]]
  then
    shift
    test=1
  elif [[ "$1" == "clean" ]]
  then
    shift
    clean=1
  elif [[ "$1" == "wait" ]]
  then
    shift
    wait=1
  elif [[ ${#gdb} > 0 && "$1" == "--" ]]
  then
    shift
    if [[ "${#@}" ]]
    then
      gdb="${gdb} ${@} "
      shift "${#@}"
    fi
  elif [[ -d "${cmake_prefix}$1" ]]
  then
    rundir="$1"
    echo rundir changed to: ${rundir}
    shift
  else
    echo "Unknown option: $1" 1>&2
    exit 127
  fi
done

if [[ ${#gdb} > 0 ]]
then
  gdbcommands=(
    "run"
    "generate-core-file"
    "set pagination off"
    "set logging enabled on"
    "thread apply all bt full"
    "set logging enabled off"
    "quit"
  )
  for c in "${gdbcommands[@]}"
  do
    gdb+=" -ex ${c}"
  done
  gdb+=" --args"
fi

nproc=$(nproc)

time (
  set -o pipefail
  rm -fv build/testrun.out
  if [[ ${clean} != 0 ]]
  then
    for dir in ${cmake_dirs}
    do
      dir=${cmake_prefix}${dir}
      cmake --build $dir --target clean |& tee -a build/testrun.out || exit 1
    done
  fi

  # Determine if parallel unit tests are enabled.
  parallel_test=''

  set -x
  dir=${cmake_prefix}${rundir}
  cmake --build $dir -- -j${nproc} |& tee -a build/testrun.out || exit 1
  parallel_test=$( $dir/rippled --help |& grep -q unittest-jobs && \
    echo "--testjobs=${nproc}" )
  set +x

  echo Parallel: ${parallel_test} |& tee -a build/testrun.out

  # CMake
  if [[ ${fast} != 0 ]]
  then
    for dir in ${cmake_dirs}
    do
      dir=${cmake_prefix}${dir}
      for target in ${cmake_targets}
      do
        echo Building $target in $dir |& tee -a build/testrun.out
        cmake --build $dir --target $target -- -j${nproc} \
          |& tee -a build/testrun.out || exit 1
      done
    done || exit 1
  else
    set -x
    ./Builds/Test.py -v --dir ${cmake_dirs} --target ${cmake_targets} \
      ${parallel_test} -- -j${nproc} |& tee build/testrun.out || exit 1
    set +x
  fi

) || exit 1

if [[ ${test} != 0 ]]
then
  exit 0
fi

set -x

ulimit -c unlimited
${terminal} tmux new-session ${tmuxopts} -s rippled -x 80 -y 30 \
  sleep 600 || true
# Give the terminal a few seconds to create
sleep 2
for network in rippled # rippled-altnet
do
  for file in debug.log logs/debug.log log/debug.log \
      perf.log logs/perf.log log/perf.log
  do
    if [ -e "${HOME}/${network}/${file}" ]
    then
      mv -vi "${HOME}/${network}/${file}"{,.$(date '+%s')} || true
    fi
  done
  if [ -e ~/.config/ripple/${network}.cfg ]
  then
    # Stop the currently running rippled, if any
    "${cmake_prefix}${rundir}/rippled" \
      --conf ~/.config/ripple/${network}.cfg stop || true
    # Start the new rippled
    tmux new-window -a -t rippled:$ -n rippled "${gdb} \
      ${cmake_prefix}${rundir}/rippled \
      --conf ~/.config/ripple/${network}.cfg --net ${gdbextra}"
      : 'https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html'
      : 'C-x a'
  fi
done

grep failures build/testrun.out

if [[ -v wait ]]
then
  read -n 1 -p "Press any key to continue..." -s
fi
